/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.netology.pyas;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.nio.charset.StandardCharsets;

public class Server {

    private final static String HOST = "127.0.0.1";
    private final static int PORT = 8080;

    private final static int BUFFER_LENGTH = 64;

    public static void main(String[] args) {
        ServerSocketChannel serverChannel;
        try {
            serverChannel = ServerSocketChannel.open();
            serverChannel.bind(new InetSocketAddress(HOST, PORT));
        } catch (IOException e) {
            System.out.println("Ошибка сокета сервера: " + e.getMessage());
            return;
        }

        System.out.println("Сервер запущен");

        while (true) {
            try (SocketChannel clientChannel = serverChannel.accept()) {
                clientChannel.configureBlocking(false); // Переводим канал в неблокирующий режим
                ByteBuffer inputBuffer = ByteBuffer.allocate(BUFFER_LENGTH);

                while (clientChannel.isConnected()) {
                    int readCount = clientChannel.read(inputBuffer);
                    if (readCount == 0) { // Ждём появления данных в буфере
                        continue;
                    }
                    if (readCount == -1) {
                        break;
                    }

                    String string = new String(inputBuffer.array(), 0, readCount, StandardCharsets.UTF_8);
                    System.out.println("Получил строку: " + string);
                    inputBuffer.clear();
                    string = string.replaceAll("\s", "");

                    ByteBuffer outputBuffer = ByteBuffer.wrap(string.getBytes(StandardCharsets.UTF_8));
                    clientChannel.write(outputBuffer);
                }
            } catch (IOException e) {
                System.out.println("Ошибка сокета клиента: " + e.getMessage());
                break;
            }
        }

        try {
            serverChannel.close();
        } catch (IOException e) {
            System.out.println("Ошибка закрытия сокета сервера: " + e.getMessage());
        }
    }

}
