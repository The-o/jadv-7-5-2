/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.netology.pyas;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;

public class Client {

    private final static String HOST = "127.0.0.1";
    private final static int PORT = 8080;

    private final static int BUFFER_LENGTH = 4;

    private final static String END = "end";

    public static void main(String[] args) {
        SocketChannel channel;
        try {
            channel = SocketChannel.open(new InetSocketAddress(HOST, PORT));
            channel.configureBlocking(false); // Переводим канал в неблокирующий режим
        } catch (IOException e) {
            System.out.println("Ошибка открытия сокета: " + e.getMessage());
            return;
        }

        try (Scanner scanner = new Scanner(System.in)) {
            ByteBuffer inputBuffer = ByteBuffer.allocate(BUFFER_LENGTH);

            while(true) {
                System.out.print("Введите строку: ");
                String string = scanner.nextLine();

                if (string.equals(END)) {
                    break;
                }
                ByteBuffer outputBuffer = ByteBuffer.wrap(string.getBytes(StandardCharsets.UTF_8));
                channel.write(outputBuffer);
                int readCount;
                StringBuilder builder = new StringBuilder();
                while (0 == (readCount = channel.read(inputBuffer))); // Ждём, пока в буфере появятся данные
                // Читаем данные из буфера, пока они есть
                do {
                    String chunk = new String(inputBuffer.array(), 0, readCount, StandardCharsets.UTF_8);
                    builder.append(chunk);
                    inputBuffer.clear();
                } while (0 != (readCount = channel.read(inputBuffer)));
                System.out.println("Результат: " + builder.toString());
            }
        } catch (IOException e) {
            System.out.println("Ошибка сокета: " + e.getMessage());
        }

        try {
            channel.close();
        } catch (IOException e) {
            System.out.println("Ошибка закрытия сокета: " + e.getMessage());
        }
    }

}
